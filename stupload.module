<?php

	function stupload_perm() {
		return array(
			'administer stupload',
			'stupload english tutorial upload',
			'stupload english tutorial update',
			'stupload regional language tutorial upload',
			'stupload regional language tutorial update',
			'stupload upload english-timed script',
			'stupload add foss and tutorial',
			'resource not required',
			'review tutorial',
			'domain review tutorial',
			'admin review tutorial',
			'quality review tutorial',
			'stupload ajax-fill methods',
			'contributor access',
			'reviewer role assign',
		);
	}

	function stupload_menu(){
		$items = array();
	
		// stupload admin settings form
		$items['admin/settings/stupload'] = array(
			'title' => 'spoken-tutorial upload settings',
			'description' => 'spoken-tutorial upload interface settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('stupload_settings_form'),
			'access arguments' => array('administer stupload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'settings.inc',
		);
		// public review tutorials
		$items['stupload/public_review'] = array(
			'description' => 'spoken-tutorial public rating page',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('stupload_settings_form'),
			'access arguments' => array('administer stupload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'public_review.inc',
		);
		// add new foss, tutorials
		$items['stupload/add_foss'] = array(
			'title' => 'Add New FOSS Category',
			'description' => 'Add New FOSS Category for ST Videos',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('add_foss_form'),
			'access arguments' => array('stupload add foss and tutorial'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'add_foss.inc',
		);
		$items['stupload/add_tutorial'] = array(
			'title' => 'Add New Tutorial Name',
			'description' => 'Add New Tutorial for FOSS Category',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('add_tutorial_name_form'),
			'access arguments' => array('stupload add foss and tutorial'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'add_tutorial_name.inc',
		);
		// upload english tutorials
		$items['stupload/upload_english_tutorial'] = array(
			'title' => 'Upload English Tutorial',
			'description' => 'Upload English',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('upload_english_prerequest_form'),
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_prerequest.inc',
		);
		$items['stupload/upload_english_tutorial_index'] = array(
			'title' => 'English Tutorial Upload Page',
			'page callback' => 'english_index',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'add_english_index.inc',
		);
		$items['stupload/update_english_tutorial/outline'] = array(
			'description' => 'Upload English Outline',
			'page callback' => 'upload_english_outline',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_outline.inc',
		);
		$items['stupload/update_english_tutorial/script'] = array(
			'description' => 'Upload English Script',
			'page callback' => 'upload_english_script',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_script.inc',
		);
		$items['stupload/update_english_tutorial/slide'] = array(
			'description' => 'Upload English Slide',
			'page callback' => 'upload_english_slide',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_slide.inc',
		);
		$items['stupload/update_english_tutorial/video'] = array(
			'description' => 'Upload English Video',
			'page callback' => 'upload_english_video',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_video.inc',
		);
		$items['stupload/update_english_tutorial/codefile'] = array(
			'description' => 'Upload English Code ',
			'page callback' => 'upload_english_codefile',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_codefile.inc',
		);
		$items['stupload/update_english_tutorial/assignment'] = array(
			'description' => 'Upload English Assignment ',
			'page callback' => 'upload_english_assignment',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_assignment.inc',
		);
		// update english tutorial
		$items['stupload/update_english_tutorial'] = array(
			'title' => 'Update English Tutorial',
			'description' => 'Update English Tutorial',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('upload_english_prerequest_form'),
			'access arguments' => array('stupload english tutorial update'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_english_prerequest.inc',
		);
		$items['stupload/update_english_tutorial_index'] = array(
			'title' => 'English Tutorial Update Page',
			'page callback' => 'english_update_index',
			'access arguments' => array('stupload english tutorial update'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'add_english_index.inc',
		);
		// Add English Timed Script
		$items['stupload/upload_english_timed_script'] = array(
			'description' => 'Timed Script',
			'page callback' => 'english_timed_script',
			'access arguments' => array('stupload english tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'english_timed_script.inc',
		);
		
		// Upload native language tutorials
		$items['stupload/upload_regional_language_tutorial'] = array(
			'title' => 'Upload Regional Language Tutorial',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('upload_regional_language_prerequest_form'),
			'access arguments' => array('stupload regional language tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_regional_language_prerequest.inc',
		);
		$items['stupload/upload_regional_language_tutorial_index'] = array(
			'title' => 'Regional Language Tutorial Upload Page',
			'page callback' => 'olang_index',
			'access arguments' => array('stupload regional language tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'add_olang_index.inc',
		);
		$items['stupload/update_regional_language_tutorial/outline'] = array(
			'description' => 'Upload Outline',
			'page callback' => 'upload_olang_outline',
			'access arguments' => array('stupload regional language tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_olang_outline.inc',
		);
		$items['stupload/update_regional_language_tutorial/script'] = array(
			'description' => 'Upload Script',
			'page callback' => 'upload_olang_script',
			'access arguments' => array('stupload regional language tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_olang_script.inc',
		);
		$items['stupload/update_regional_language_tutorial/video'] = array(
			'description' => 'Upload Video',
			'page callback' => 'upload_olang_video',
			'access arguments' => array('stupload regional language tutorial upload'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_olang_video.inc',
		);
		// update native language tutorials
		$items['stupload/update_regional_language_tutorial'] = array(
			'title' => 'Update Regional Language Tutorial',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('upload_regional_language_prerequest_form'),
			'access arguments' => array('stupload regional language tutorial update'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'upload_regional_language_prerequest.inc',
		);
		$items['stupload/update_regional_language_tutorial_index'] = array(
			'title' => 'Regional Language Tutorial Update Page',
			'page callback' => 'olang_update_index',
			'access arguments' => array('stupload regional language tutorial update'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'add_olang_index.inc',
		);
		
		// ajax request urls
		$items['stupload/get_category_levels'] = array(
			'page callback' => 'get_category_levels',
			'access arguments' => array('stupload ajax-fill methods'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/get_category_names'] = array(
			'page callback' => 'get_category_names',
			'access arguments' => array('stupload ajax-fill methods'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/get_tutorial_levels'] = array(
			'page callback' => 'get_tutorial_levels',
			'access arguments' => array('stupload ajax-fill methods'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/get_olang_tnames'] = array(
			'page callback' => 'get_olang_tnames',
			'access arguments' => array('stupload ajax-fill methods'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/get_english_ouline'] = array(
			'page callback' => 'get_english_ouline',
			'access arguments' => array('stupload ajax-fill methods'),
			'type' => MENU_NORMAL_ITEM
		);
		// domain reviewer
		$items['stupload/domain_review_tutorials'] = array(
			'title' => 'Tutorial Review Page',
			'page callback' => 'domain_review_tutorials',
			'access arguments' => array('domain review tutorial'),
			'file' => 'domain_review_tutorials.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/domain_review_tutorial_page'] = array(
			'title' => 'Tutorial Review Page',
			'page callback' => 'domain_review_tutorial_page',
			'access arguments' => array('review tutorial'),
			'file' => 'domain_review_tutorials.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		// admin reviewer
		$items['stupload/admin_review_tutorials'] = array(
			'title' => 'Tutorial Review Page',
			'page callback' => 'admin_review_tutorials',
			'access arguments' => array('admin review tutorial'),
			'file' => 'admin_review_tutorials.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/admin_review_tutorial_page'] = array(
			'title' => 'Tutorial Review Page',
			'page callback' => 'admin_review_tutorial_page',
			'access arguments' => array('review tutorial'),
			'file' => 'admin_review_tutorials.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		
		// quality reviewer
		$items['stupload/quality_review_tutorials'] = array(
			'title' => 'Tutorial Review Page',
			'page callback' => 'quality_review_tutorials',
			'access arguments' => array('quality review tutorial'),
			'file' => 'quality_review_tutorials.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		$items['stupload/quality_review_tutorial_page'] = array(
			'title' => 'Tutorial Review Page',
			'page callback' => 'quality_review_tutorial_page',
			'access arguments' => array('review tutorial'),
			'file' => 'quality_review_tutorials.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		
		// need improvement
		$items['stupload/need_improvement_list'] = array(
			'title' => 'Need improvement list',
			'description' => 'List of tutorials sent for improvement',
			'page callback' => 'need_improvement_list',
			'access arguments' => array('contributor access'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'need_improvement_list.inc',
		);
		
		// Uploded list
		$items['stupload/uploaded_tutorials_list'] = array(
			'title' => 'List of tutorials uploaded',
			'description' => 'List of tutorials uploaded',
			'page callback' => 'uploaded_tutorials_list',
			'access arguments' => array('contributor access'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'uploaded_tutorials_list.inc',
		);
		
		// contributor view tutorial page
		$items['stupload/play_video'] = array(
			'title' => 'Spoken Tutorial Learners Interface',
			'description' => 'Play selected video',
			'page callback' => 'play_video',
			'access arguments' => array('stupload ajax-fill methods'),
			'file' => 'play_video.inc',
			'type' => MENU_NORMAL_ITEM,
		);
		
		//Delete tutorial
		$items['stupload/delete'] = array(
			'title' => 'Delete Tutorial',
			'page callback' => 'delete_tutorial',
			'access arguments' => array('contributor access'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'delete_tutorial.inc',
		);
		
		// Assign Role
		$items['stupload/domain_lang_role'] = array(
			'title' => 'Domain user language assigning page',
			'page callback' => 'domain_lang_role',
			'access arguments' => array('reviewer role assign'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'reviewer_role_assign.inc',
		);
		$items['stupload/quality_lang_role'] = array(
			'title' => 'Quality user language assigning page',
			'page callback' => 'quality_lang_role',
			'access arguments' => array('reviewer role assign'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'reviewer_role_assign.inc',
		);
		return $items;
	}

	function list_zip_archive(){
	
		require_once('path.config.inc');
	
		if(isset($_REQUEST['file_path']) && isset($_REQUEST['title'])){
			$output = '<h2>'.$_REQUEST['title'].'</h2>';
			$output .= read_ziparchive($file_upload_path.$_REQUEST['file_path']);
			$output .= '<a href="'.$tutorial_path.$_REQUEST['file_path'].'">Click here to download '.$_REQUEST['title'].'</a>';
		}else{
			$output = 'Something went wrong';
		}

		return $output;
	}

	//get tutorials for language
	function get_tutorials_language(){
		if(isset($_POST['language']) && isset($_POST['foss'])){
			$query = "SELECT  id, tutorial_name FROM tutorial_details WHERE foss_category='".$_POST['foss']."' and tutorial_details.id IN ( SELECT distinct tutorial_detail_id FROM tutorial_resources where language='".$_POST['language']."') order by foss_category, tutorial_name, tutorial_level, order_code ASC";
			$result = db_query($query);
			$output = array();
			while($row = db_fetch_object($result)){
				$output[] = $row;
			}
			echo json_encode($output);
			exit;
		}
	}
	//get tutorial outline for selected tutorial
	function get_tutorials_outline(){
		if(isset($_POST['language']) && isset($_POST['tdid'])){
			$query = "SELECT  id, tutorial_outline FROM tutorial_resources WHERE tutorial_detail_id =".$_POST['tdid']." and language='".$_POST['language']."'";
			$result = db_query($query);
			$row = db_fetch_object($result);
			echo json_encode($row);
			exit;
		}
	}

	// English timed getting tutorial names
	function get_etimed_tnames(){
		if(isset($_POST['level']) && isset($_POST['foss'])){
			$query = "SELECT  tutorial_name FROM tutorial_details WHERE foss_category='".$_POST['foss']."' and tutorial_level =  '".$_POST['level']."' AND tutorial_details.id IN ( SELECT distinct tutorial_detail_id FROM tutorial_resources where language='English')";
			$result = db_query($query);
			$output = array();
			while($row = db_fetch_object($result)){
				$output[] = $row;
			}
			echo json_encode($output);
			exit;
		}
	}

	// get_english_ouline
	function get_english_ouline(){
		if(isset($_POST['trid'])){
			$query = "SELECT  `tutorial_detail_id` FROM tutorial_resources WHERE id = '".$_POST['trid']."'";
			$result = db_query($query);
			$tr = db_fetch_object($result);

			$query = "SELECT  `tutorial_outline` FROM tutorial_resources WHERE tutorial_detail_id = '".$tr->tutorial_detail_id."' and language='English'";
			$result = db_query($query);
			$troutline = db_fetch_object($result);
			echo json_encode($troutline);
			exit;
		}
	}
	// index page

	function index(){
	
		global $user;
	
		$content = "<div class='upload-index-page list-link'><ul>";
		if(in_array('admin_review_user', $user->roles) || in_array('admin_user', $user->roles)){
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/addfoss'> Add New FOSS</a></li>";
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/tutorial'> Add New Tutorial</a></li>";
		}
		if(in_array('contributor', $user->roles) || in_array('admin_user', $user->roles)){
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/upload_english'> Upload English Tutorial</a></li>";
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/upload_other_lang'>Upload Other Language Tutorial</a></li>";
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/update_tutorial_search'>Update Existing Tutorial</a></li>";
		}
		if(in_array('admin_review_user', $user->roles) || in_array('domain_user', $user->roles) || in_array('admin_user', $user->roles)){
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/review_tutorial_lists'>Review Tutorials</a></li>";
		}
		$content .="<li><a href='".$GLOBALS['base_url']."/stupload/view_tutorials_list'>View All Tutorials</a></li>";
		if(in_array('admin_user', $user->roles)){
			$content .="<li><a href='".$GLOBALS['base_url']."/stupload/view_logs_list'>View Update Logs</a></li>";
		}
		return $content."</ul></div>";
	}

	// for "add available tutorial levels" and "add tutorial names"
	function get_tutorial_levels(){
		if(isset($_POST['foss']) && !empty($_POST['level'])){
			$query = "select tutorial_name from tutorial_details where foss_category='".$_POST['foss']."' and tutorial_level = '".$_POST['level']."' order by order_code";
			$result = db_query($query);		
			$existing_tutorial_name = array();
			while($row = db_fetch_object($result)){
				$existing_tutorial_name[] = $row->tutorial_name;
			}
		
			// get order code
			$query = "select order_code from tutorial_details where foss_category='".$_POST['foss']."' order by order_code";
			$result = db_query($query);
			$exists_order = array();		
			while($row = db_fetch_object($result)){
				$exists_order[] = $row->order_code;
			}
		
		}	
		$send_data = array();
		foreach($existing_tutorial_name as $names){
			$send_data['tnames'][] = $names;
		}
		// find available order code
		$i = 1;
		$tutorial_order_no = array();
		while($i < 100){
			$tutorial_order_no[] = $i;
			$i++;
		}
		$available = array_diff($tutorial_order_no, $exists_order);
		foreach($available as $a){
			$send_data['tlevels'][] = $a;
		}

		echo json_encode($send_data);
		exit;
	}

	// getting tutorial level
	function get_category_levels(){
		if(isset($_POST['foss'])){
			$query = "select distinct tutorial_level from tutorial_details where foss_category='".$_POST['foss']."' order by tutorial_level ASC";
			$result = db_query($query);
			$output = array();
			while($row = db_fetch_object($result)){
				$output[] = $row;
				//$output[] = '2';
			}
			echo json_encode($output);
			exit;
		}
	}

	// getting tutorial names
	function get_category_names(){
		if(isset($_POST['level']) && isset($_POST['foss'])){
			$query = "select td.tutorial_name from tutorial_resources tr, tutorial_details td where td.foss_category='".$_POST['foss']."' and td.tutorial_level='".$_POST['level']."' and tr.tutorial_detail_id=td.id and tr.language='English' and tr.tutorial_status !='accepted'";
			$result = db_query($query);
			$output = array();
			while($row = db_fetch_object($result)){
				$output[] = $row;
			}
			echo json_encode($output);
			exit;
		}
	}

	function get_timed_category_names(){
		if(isset($_POST['level']) && isset($_POST['foss'])){
			$query = "SELECT  tutorial_name FROM tutorial_details WHERE foss_category='".$_POST['foss']."' and tutorial_level =  '".$_POST['level']."' AND tutorial_details.id NOT IN ( SELECT distinct tutorial_detail_id FROM tutorial_resources where language='English-timed')";
			$result = db_query($query);
			$output = array();
			while($row = db_fetch_object($result)){
				$output[] = $row;
			}
			echo json_encode($output);
			exit;
		}
	}


/******** for other languages ************/
	

	// getting tutorial names
	function get_olang_tnames(){
		if(isset($_POST['level']) && isset($_POST['foss']) && isset($_POST['lang']) && isset($_POST['flag'])){
			if($_POST['flag'] == 0){
				$query = "SELECT  tutorial_name FROM tutorial_details WHERE foss_category='".$_POST['foss']."' and tutorial_level =  '".$_POST['level']."' AND tutorial_details.id IN (SELECT tutorial_detail_id FROM tutorial_resources where language='English' AND tutorial_status='accepted') AND tutorial_details.id NOT IN (SELECT tutorial_detail_id FROM tutorial_resources where language='".$_POST['lang']."' and tutorial_status='accepted')";
			}else{
				$query = "SELECT  tutorial_name FROM tutorial_details WHERE foss_category='".$_POST['foss']."' and tutorial_level =  '".$_POST['level']."'";
			}
			$result = db_query($query);
			$output = array();
			while($row = db_fetch_object($result)){
				$output[] = $row;
			}
			echo json_encode($output);
			exit;
		}
	}


	function read_ziparchive($file_path){

		//Create object
		$zip = new ZipArchive();
		//Open the archive2.zip
		if ($zip->open($file_path) !== TRUE) {
			return '<span>Could not open archive</span>';
		}else{
			//Get the number of files in archive2.zip
			$numFiles = $zip->numFiles;

			//Iterate over the file list
			$file_data = "<ul class='archive-files'>";
			for ($i=0; $i<$numFiles; $i++) {
				//Get the details of an entry defined by its index
				$tmp = $zip->statIndex($i);
				$file_data .= '<li>'.$tmp['name'].'</li>';
			}
			$file_data .= "</ul>";
			// close archive
			$zip->close();
			return $file_data;
		
		}

	}

	function get_resource_not_required(){
		echo '<html>
				<head>
					<meta name="author" content="Spoken Tutorials (www.spoken-tutorials.org)">
					<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
					<link rel="stylesheet" href="drupst2nreq.php_files/style.css" type="text/css">
					<title>Complete List of Spoken Tutorials</title>
		
					<style type="text/css">
						td {font-family: tahoma, arial, verdana; font-size: 8pt }
						th {font-family:tahoma, arial, verdana; font-size:9pt}
					</style>
				</head>
				<body>
					<form method="POST" action="drupst2.php" id="stform" name="stform">
						<script type="text/javascript">
							//Disable right click script
							var message="Sorry, right-click has been disabled";
		
							function clickIE() {if (document.all) {(message);return false;}}
							function clickNS(e) {
							if(document.layers||(document.getElementById&&!document.all)){if (e.which==2||e.which==3) {(message);return false;}}}
							if (document.layers){document.captureEvents(Event.MOUSEDOWN);document.onmousedown=clickNS;}
							else{document.onmouseup=clickNS;document.oncontextmenu=clickIE;}
							document.oncontextmenu=new Function("return false");
		
							function setOptions(chosen) {
								var theContents = document.getElementById("foss1")[document.getElementById("foss1").selectedIndex].innerHTML;
								document.getElementById("fossdata").value = theContents;
								document.getElementById("fossid").value = theContents;
								document.rbid.insht.value = theContents;
							}
		
							function setOptions3(chosen) {
								var theContenta = document.getElementById("lang")[document.getElementById("lang").selectedIndex].innerHTML;
								document.getElementById("language").value = theContenta;
								document.getElementById("fossid").value = theContenta;
							}
		
							function GetSelectedItem() {
								len = document.stform.radioid.length;
								document.rbid.radiovalue.value=document.getElementById("fid").value;
		
								for (i = 0; i <len; i++) {
									if (document.stform.radioid[i].checked) {
										chosen = document.stform.radioid[i].value;
									}
								}
		
								if(chosen =="") {
									alert("Please select a Tutorial to watch");
								}
								else
								{
									document.rbid.radiovalue.value=chosen;
									document.rbid.insht.value=document.stform.fossdata.value;
								}
							}
		
							function showInstrsheet(){
		
								if(document.stform.fossdata.value =="")
							  {
									window.alert("Please select FOSS category to view instruction sheet");window.self;
								}
								else
								{
									inswindow=window.open(inks,"InstructionSheet","width=610 height=50 resizable=no scrollbars=no");
									inswindow.moveTo(350,300);
								}
							}
						</script>
		
						<center>
							<br>
							<p>
								<table bgcolor="#D2691E" width="600">
									<tbody>
										<tr>
											<td>
												<b>
													<font color="white" face="arial" size="2">
														<center>
															Resource Not Required<br><br>
															This resource is not required to complete this tutorial.<br>
															You can continue watching rest of the tutorials. 
															Please use the search feature to watch several other interesting tutorials. 
														</center>
													</font>
												</b>
											</td>
										</tr>
									</tbody>
								</table>
							</p>
							<br>
							<table height="5" bgcolor="lightgrey" width="600" border="0">
								<tbody>
									<tr>
										<td>
											<center>
												© 2011 | <a href="http://www.spoken-tutorial.org/" target="_blank">Spoken Tutorial.org</a><br>
												<b>IIT Bombay</b>
											</center>
										</td>
									</tr>
								</tbody>
							</table>
						</center>
					</form>
				</body>
			</html>';
		exit;
	}

	function get_resource_not_available(){
	
		echo '<html>
				<head>
					<meta name="author" content="Spoken Tutorials (www.spoken-tutorials.org)">
					<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
					<link rel="stylesheet" href="drupst2nreq.php_files/style.css" type="text/css">
					<title>Complete List of Spoken Tutorials</title>
		
					<style type="text/css">
						td {font-family: tahoma, arial, verdana; font-size: 8pt }
						th {font-family:tahoma, arial, verdana; font-size:9pt}
					</style>
				</head>
				<body>
					<form method="POST" action="drupst2.php" id="stform" name="stform">
						<script type="text/javascript">
							//Disable right click script
							var message="Sorry, right-click has been disabled";
		
							function clickIE() {if (document.all) {(message);return false;}}
							function clickNS(e) {
							if(document.layers||(document.getElementById&&!document.all)){if (e.which==2||e.which==3) {(message);return false;}}}
							if (document.layers){document.captureEvents(Event.MOUSEDOWN);document.onmousedown=clickNS;}
							else{document.onmouseup=clickNS;document.oncontextmenu=clickIE;}
							document.oncontextmenu=new Function("return false");
		
							function setOptions(chosen) {
								var theContents = document.getElementById("foss1")[document.getElementById("foss1").selectedIndex].innerHTML;
								document.getElementById("fossdata").value = theContents;
								document.getElementById("fossid").value = theContents;
								document.rbid.insht.value = theContents;
							}
		
							function setOptions3(chosen) {
								var theContenta = document.getElementById("lang")[document.getElementById("lang").selectedIndex].innerHTML;
								document.getElementById("language").value = theContenta;
								document.getElementById("fossid").value = theContenta;
							}
		
							function GetSelectedItem() {
								len = document.stform.radioid.length;
								document.rbid.radiovalue.value=document.getElementById("fid").value;
		
								for (i = 0; i <len; i++) {
									if (document.stform.radioid[i].checked) {
										chosen = document.stform.radioid[i].value;
									}
								}
		
								if(chosen =="") {
									alert("Please select a Tutorial to watch");
								}
								else
								{
									document.rbid.radiovalue.value=chosen;
									document.rbid.insht.value=document.stform.fossdata.value;
								}
							}
		
							function showInstrsheet(){
		
								if(document.stform.fossdata.value =="")
							  {
									window.alert("Please select FOSS category to view instruction sheet");window.self;
								}
								else
								{
									inswindow=window.open(inks,"InstructionSheet","width=610 height=50 resizable=no scrollbars=no");
									inswindow.moveTo(350,300);
								}
							}
						</script>
		
						<center>
							<br>
							<p>
								<table bgcolor="#D2691E" width="600">
									<tbody>
										<tr>
											<td>
												<b>
													<font color="white" face="arial" size="2">
														<center>
															Resource Not Available<br><br>
															This resource is not available right now.<br>
															You can continue watching rest of the tutorials.
															Please use the search feature to watch several other interesting tutorials. 
														</center>
													</font>
												</b>
											</td>
										</tr>
									</tbody>
								</table>
							</p>
							<br>
							<table height="5" bgcolor="lightgrey" width="600" border="0">
								<tbody>
									<tr>
										<td>
											<center>
												© 2011 | <a href="http://www.spoken-tutorial.org/" target="_blank">Spoken Tutorial.org</a><br>
												<b>IIT Bombay</b>
											</center>
										</td>
									</tr>
								</tbody>
							</table>
						</center>
					</form>
				</body>
			</html>';
		exit;
	}


	// functions to send emails

	// get message
	function get_meassage($role, $message, $td, $user_name){

		if($role == 'contributor'){
			if($message != ''){
				if($td->stage == "qreview"){
					$body_msg = "<p> Dear ".$user_name.", </p><p>Your uploaded content reviewed by Quality checker. Details below</p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."<br> Status: ".$td->status."</h3><p><h3>Remarks : </h3>".$message.'</p>';
				}else{
					$body_msg = "<p> Dear ".$user_name.", </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."<br>Status: ".$td->status."</h3><p><h3>Remarks : </h3>".$message.'</p>';
				}
			}else{
				if($td->stage == "qreview"){
					$body_msg = "<p> Dear ".$user_name.", </p><p>Your uploaded content reviewed by Quality checker. Details below</p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."<br>Status: ".$td->status."</h3>";
				}else{
					$body_msg = "<p> Dear ".$user_name.", </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."<br>Status: ".$td->status."</h3>";
				}
			}
		}else if($role == 'admin_review_user'){
			if($message != ''){
				$body_msg = "<p>Dear Reviewer, </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."</h3><p><h3>Remarks : </h3>".$message.'</p>';
			}else{
				$body_msg = "<p> Dear Reviewer, </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."</h3>";
			}
		}else if($role == 'domain_user'){
			if($message != ''){
				$body_msg = "<p> Dear Reviewer, </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."</h3><p><h3>Remarks : </h3>".$message.'</p>';
			}else{
				$body_msg = "<p> Dear Reviewer, </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."</h3>";
			}
		}else if($role == 'admin_user'){
			if($message != ''){
				$body_msg = "<p> Dear Admin User, </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."</h3><p><h3>Remarks : </h3>".$message.'</p>';
			}else{
				$body_msg = "<p> Dear Admin User, </p><p>The following content is uploaded in <a href='http://www.spoken-tutorial.org'> spoken-tutorial.org</a></p><h3> FOSS : ".$td->foss_category."<br> Level : ".$td->tutorial_level."<br> Tutorial Name : ".$td->tutorial_name.'<br> Language : '.$td->language.'<br> Content : '.$td->tc."</h3>";
			}
		}
		return $body_msg;
	}
	function get_role_emails($role){
		//var_dump($role);
		$query = "SELECT users.name, users.mail FROM role LEFT JOIN users_roles ON users_roles.rid = role.rid LEFT JOIN users ON users_roles.uid = users.uid WHERE role.name = '".$role."'";
		$result = db_query($query);
		$email_ids = '';
		while($row = db_fetch_object($result)){
			$email_ids .= $row->mail.',';
		}
		return $email_ids;
	}
	
	function get_language_role_emails($lang){
		$email_ids ='';
		if($lang){
			$query = "select u.mail from users u, tutorial_languages tl, tutorial_quality_roles tqr where tqr.language_id=tl.id and u.uid=tqr.uid and tl.name='Tamil'";
			$result = db_query($query);
			while($row = db_fetch_object($result)){
				$email_ids .= $row->mail.',';
			}
		}
		return $email_ids;
	}
	function get_contributor_email($uid){
		$query = "SELECT mail FROM users WHERE uid ='".$uid."'";
		$result = db_query($query);
		$row = db_fetch_object($result);
		return $row->mail;
	}
	function stupload_notify($mailto, $role, $message, $td, $user_name) {
		// get subject
		$subject_content = array('contributor' => 'Spoken Tutorial Upload Notification', 'admin_review_user' => 'Spoken Tutorial Upload Notification', 'admin_user' => 'Spoken Tutorial Upload Notification', 'domain_user' => 'Spoken Tutorial Upload Notification');
		echo $mailto."---".$subject_content[$role]."---".get_meassage($role, $message, $td, $user_name)."<br>";
		echo "</br> ===>";
		
		global $custom_email;
		$mailfrom = $custom_email;
		if(isset($td->tc) && $td->tc != ''){
			//drupal_mail('stupload', 'reply', $mailto, language_default(),
		          //   array('body' => get_meassage($role, $message, $td, $user_name), 'subject' => $subject_content[$role]), $mailfrom, TRUE);
		}else{
			return true;
		}
	}
  
	function stupload_mail($key, &$message, $params) {
		$message['subject'] = $params['subject'];
		$message['body'] = $params['body'];
		$headers = array(
		    'MIME-Version' => '1.0',
		    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
		    'Content-Transfer-Encoding' => '8Bit',
		    'X-Mailer' => 'Drupal'
		  );
		//var_dump($message);
		foreach ($headers as $key => $value) {
		    $message['headers'][$key] = $value;
		}
	}
	
	// component status
	function component_status($status, $uid, $path = NULL, $outline = 0 ){
		$status_array = array(0 => 'Pending', 1 => 'Waiting for admin review', 2 => 'Waiting for Domain review', 3 => 'Waiting for quality check', 4 => 'Accepted', 5 => 'Need improvement', 6 => 'Not required');
		$flag = 0;
		$output = '';
		if($outline == 1){
			if($status == 0 && $uid == 0){
				return "<span class='code_red'>".$status_array[$status]."</span>";
			}elseif($status == 0){
				return "<span class='code_orange'>".$status_array[$status]."</span>";
			}else{
				return "<p class='outline'>".stuolpad_outline_humen_view($path)."</p>";
			}
		}
		// slide
		if($outline == 2){
			if($status == 0 && $uid == 0){
				$output = "<span class='code_red'>";
			}elseif($status == 0){
				return "<span class='code_orange'>".$status_array[$status]."</span>";
			}else{
				return "<a target='_blank' href='".variable_get('wiki_path', '').$path."'><span class='code_green'>".$status_array[$status]."</span></a>";
			}
		}
		
		if($status == 0 && $uid == 0){
			$output = "<span class='code_red'>";
		}elseif($status == 0 && $uid > 0){
			$output = "<span class='code_orange'>";
		}else{
			if($path && file_exists(variable_get('file_upload_path', '').$path)){
				$flag = 1;
				$output = "<a target='_blank' href='".variable_get('tutorial_path', '').$path."'><span class='code_green'>";
			}elseif($path == NULL){
				return $path;
			}else{
				$output = "<span class='code_orange'>";
			}
		}
		$output .= $status_array[$status]."</span>";
		if($flag){
			$output .= "</a>";
		}
		return $output;
	}
	
	function component_status_symbols($status, $flag=0){
		$output = '';
		$status_array = array(0 => 'Pending', 1 => 'Under admin review', 2 => 'Under Domain review', 3 => 'Under quality check', 4 => 'Accepted', 5 => 'Need improvement', 6 => 'Not required');
		if($flag){
			$output = $status_array[$status];
		}else{		
			if($status == 6)
				$output = "<div class='code_green' title='".$status_array[$status]."'>--</div>";
			elseif($status > 0)
				$output = "<div class='code_green' title='".$status_array[$status]."'>&#10004;</div>";
			else
				$output = "<div class='code_red' title='".$status_array[$status]."'>&#8855;</div>";
		}
		return $output;
	}
	function stuolpad_outline_humen_view($outline){
	       $temp = str_replace("\t", "  &nbsp; ", $outline);
	       $temp = str_replace("\n\n\n", "\n", $temp);
	       $outline_array = explode("\n", $temp);
	       $temp = "";
	       foreach($outline_array as $line) {
		       $line = trim($line);
		       if($line != ''){
		               $temp .= "<li>".$line."</li>";
		       }
	       }
	       return "<ul>".$temp."</ul>";
	}
	
	function _format_bytes($a_bytes)
	{
	    if ($a_bytes < 1000) {
	        return $a_bytes .' B';
	    } elseif ($a_bytes < 1048576) {
	        return round($a_bytes / 1000, 2) .' KB';
	    } elseif ($a_bytes < 1073741824) {
	        return round($a_bytes / 1000000, 2) . ' MB';
	    }
	}
	
	// reviews
		function status_update_comp_query($c, $status){
		if($c == 'Outline'){
			$output= 'tr.tutorial_outline_status = '.$status;
		}elseif($c == 'Script'){
			$output= 'tr.tutorial_script_status = '.$status;
		}elseif($c == 'Slide'){
			$output= 'tcc.tutorial_slide_status = '.$status;
		}elseif($c == 'Video'){
			$output= 'tr.tutorial_video_status = '.$status;
		}elseif($c == 'Codefile'){
			$output= 'tcc.tutorial_code_status = '.$status;
		}elseif($c == 'Assignment'){
			$output= 'tcc.tutorial_assignment_status = '.$status;
		}
		
		return $output;
	}
	
	function user_email($uid){
		$query = "SELECT mail, name FROM users WHERE uid ='".$uid."'";
		$result = db_query($query);
		$row = db_fetch_object($result);
		return $row;
	}


?>
